#!/bin/bash

# Converts words to snake-case from
# camelCase
# PascalCase
# kebab-case
# Train-Case

awkcommand='
BEGIN {
}

{
  pattern = "[^ .+=\"(]+[A-Z0-9][a-z0-9]+"
  if (match($0, pattern)) {
    newstr = matchstr = substr($0, RSTART, RLENGTH)
    newstr = tolower(gensub(/([A-Z])([a-z]+)/, "_\\1\\2", "g", newstr))
    gsub(/^_/, "", newstr)
    gsub(matchstr, newstr)
    gsub(/-/, "")
  } else {
    gsub(/-/, "_")
  }
  print $0 >> ARGV[2]
}

END {
}
'

dobackup=0
files=()

while [[ -n "${1}" ]]
do
  [[ -z "${dobackup}" || "${dobackup}" -eq 0 ]] && \
    ([[ "${1}" == "-b" ]] || [[ "${1}" == "--backup" ]]) && \
    dobackup=1 && shift && continue

  inputfiles="$(realpath -- "${1}" 2>/dev/null)"
  [[ "${?}" -ne 0 ]] && echo "Unrecognized ${1}" && shift && continue
  for file in "${inputfiles}"
  do
    ([[ ! -f "${file}" ]] && echo ""$(basename "${file}")" not found") && continue
    files+=("${file}")
  done

  shift
done

! command -v awk &> /dev/null && echo "awk not found" && exit 1

for file in "${files[@]}"
do
  filename="$(basename "${file}")"
  tmpfile="/tmp/""${filename}"".copy"
  [[ "${dobackup}" -ne 0 ]] && \
    cp "${file}" "${file}"".orig" && \
    echo "Backed up to ""${file}"".orig"
  awk "${awkcommand}" "${file}" ${tmpfile}
  cp "${tmpfile}" "${file}"
  rm -f "${tmpfile}"
  echo "Snaked ${filename}"
done
